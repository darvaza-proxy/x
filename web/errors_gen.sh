#!/bin/sh

set -eu

TAG=go:generate
GOFILE=${GOFILE:-${0%.sh}.go}
GOPACKAGE=${GOPACKAGE:-web}

exec > "$GOFILE~"

cat <<EOT
package $GOPACKAGE

// Code generated by $0; DO NOT EDIT

//$TAG $0

import (
	"fmt"
	"net/http"
	"strings"
	"time"

	"darvaza.org/x/fs"
	"darvaza.org/x/web/consts"
)
EOT

# redirects
#
for x in \
	MovedPermanently=301 \
	Found=302 \
	SeeOther=303 \
	TemporaryRedirect=307 \
	PermanentRedirect=308 \
	; do

	name=${x%=*}
	code=${x#*=}

	cat <<EOT

// NewStatus$name returns a $code redirect error.
func NewStatus$name(dest string, args ...any) *HTTPError {
	if len(args) > 0 {
		dest = fmt.Sprintf(dest, args...)
	}

	trailing := strings.HasSuffix(dest, "/")
	dest, _ = fs.Clean(dest)
	if trailing && !strings.HasSuffix(dest, "/") {
		dest += "/"
	}

	return &HTTPError{
		Code: http.Status$name,
		Hdr: http.Header{
			consts.Location: []string{dest},
		},
	}
}
EOT
done

# wrappers
#
for x in \
	BadRequest=400 \
	UnsupportedMediaType=415 \
	UnprocessableEntity=422 \
	InternalServerError=500 \
	BadGateway=502 \
	; do

	name=${x%=*}
	code=${x#*=}

	cat <<EOT

// NewStatus$name returns a $code HTTP error,
// unless the given error is already qualified.
func NewStatus$name(err error) *HTTPError {
	if e, ok := err.(*HTTPError); ok {
		return e
	}

	return &HTTPError{
		Code: http.Status$name,
		Err:  err,
	}
}
EOT
done

# retry (set Retry-After header in seconds)
#
for x in \
	TooManyRequests=429 \
	ServiceUnavailable=503 \
	; do

	name=${x%=*}
	code=${x#*=}

	cat <<EOT

// NewStatus$name returns a $code HTTP error with Retry-After header.
// The retryAfter duration is rounded up to the nearest second.
func NewStatus$name(retryAfter time.Duration) *HTTPError {
	hdr := make(http.Header)
	SetRetryAfter(hdr, retryAfter)

	return &HTTPError{
		Code: http.Status$name,
		Hdr:  hdr,
	}
}
EOT
done

# basic
#
for x in \
	NotModified=304 \
	Unauthorized=401 \
	Forbidden=403 \
	NotFound=404 \
	NotAcceptable=406 \
	Conflict=409 \
	Gone=410 \
	PreconditionFailed=412 \
	NotImplemented=501 \
	GatewayTimeout=504 \
	; do

	name=${x%=*}
	code=${x#*=}

	cat <<EOT

// NewStatus$name returns a $code HTTP error.
func NewStatus$name() *HTTPError {
	return &HTTPError{
		Code: http.Status$name,
	}
}
EOT
done

mv "$GOFILE~" "$GOFILE"
